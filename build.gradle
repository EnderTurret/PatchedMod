buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        mavenCentral()
		mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath group: 'com.diffplug.gradle', name: 'goomph', version: '3.35.0'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT-fix'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

apply plugin: 'eclipse'
apply plugin: 'com.diffplug.eclipse.apt'
apply plugin: 'org.spongepowered.mixin'

version = '1.18.2-1.0.0'
group = 'net.enderturret'
archivesBaseName = 'Patched-forge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
	add sourceSets.main, 'patched.refmap.json'
}

// TODO Try to fix refmap being omitted from shadowJar

/*sourceSets.main {
    ext.refMap = 'patched.refmap.json'
}*/

repositories {
	mavenLocal()
}

configurations {
	// Create the library configuration, where our non-mod libraries will be added to
	library
	// Any dependency in the library configuration will also be added to the implementation configuration
	implementation.extendsFrom library
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.54'

	library ('net.enderturret:Patched:1.0.2') {
		exclude group: 'com.google.code.gson', module: 'gson'
	}

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

minecraft {
    mappings channel: 'parchment', version: '2022.07.03-1.18.2'

    runs {
        client {
            workingDirectory project.file('run')

            arg '-mixin.config=mixins.patched.json'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                patched {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg '-mixin.config=mixins.patched.json'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                patched {
                    source sourceSets.main
                }
            }
        }
    }
}

// Configure all runs with the following
minecraft.runs.all {
	// Set the minecraft_classpath token to the paths of all jars in the library configuration
	// This is added with the actual Minecraft classpath to get the real classpath information later on
	lazyToken('minecraft_classpath') {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

shadowJar {
    classifier 'all'

    dependencies {
        include(dependency('net.enderturret:Patched:1.0.2'))
    }
}

artifacts {
    archives shadowJar
}

afterEvaluate {
    reobf {
        shadowJar {
            mappings = createMcpToSrg.output
        }
    }
}

jar {
    manifest {
        attributes([
            'Specification-Title': 'Patched',
            'Specification-Vendor': 'EnderTurret',
            'Specification-Version': '1',
            'Implementation-Title': 'Patched',
            'Implementation-Version': "${version}",
            'Implementation-Vendor' : 'EnderTurret',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'MixinConfigs': 'mixins.patched.json'
        ])
    }
}

//jar.finalizedBy('reobfJar')
jar.finalizedBy('reobfShadowJar')
shadowJar.finalizedBy('reobfShadowJar')
//shadowJar.finalizedBy('reobfJar')

// Compact JSON files for smol jars.

import groovy.json.*

processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}