plugins {
    id 'com.gradleup.shadow' version '8.3.0' apply false
    id 'com.diffplug.eclipse.apt' version '4.1.0' apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'com.gradleup.shadow'
    apply plugin: 'com.diffplug.eclipse.apt'

    version = '3.3.1+1.20.1'
    group = 'net.enderturret'

    ext {
        patchedVersion = '1.4.0'
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    repositories {
        maven {
            url = 'https://jitpack.io'
            content {
                includeGroup 'com.github.EnderTurret'
            }
        }
    }

    configurations {
        sourceShadow
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    tasks.withType(AbstractArchiveTask).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.named('processResources', ProcessResources).configure {
        doLast {
            fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
                File file -> file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
            }
        }
    }

    tasks.named('jar', Jar).configure {
        manifest {
            attributes([
                'Specification-Title': 'Patched',
                'Specification-Vendor': 'EnderTurret',
                'Specification-Version': '1',
                'Implementation-Title': 'Patched',
                'Implementation-Version': "${version}",
                'Implementation-Vendor': 'EnderTurret'
            ])
        }
    }

    tasks.named('sourcesJar', Jar).configure {
        // Add the Patched library sources to the built jars' sources.
        dependsOn configurations.sourceShadow
        from {
            configurations.sourceShadow.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }

        from (rootDir) {
            include 'LICENSE.txt'
        }
    }

    if (it != project(':PatchedModCommon')) {
        tasks.named('compileJava', JavaCompile).configure {
            source project(':PatchedModCommon').sourceSets.main.allSource
        }

        tasks.named('sourcesJar', Jar).configure {
            from project(':PatchedModCommon').sourceSets.main.allJava
        }

        tasks.named('processResources', ProcessResources).configure {
            from project(':PatchedModCommon').sourceSets.main.resources
        }
    }
}