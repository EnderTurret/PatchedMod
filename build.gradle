plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'eclipse'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = '1.20-1.0.0'
group = 'net.enderturret'
archivesBaseName = 'Patched-fabric'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
	maven {
        url = 'https://jitpack.io'
        content {
            includeGroup 'com.github.EnderTurret'
        }
    }
}

dependencies {
    minecraft 'com.mojang:minecraft:1.20'
    mappings loom.officialMojangMappings()
    modImplementation 'net.fabricmc:fabric-loader:0.14.21'
    modImplementation 'net.fabricmc.fabric-api:fabric-api:0.83.0+1.20'

    implementation ('com.github.EnderTurret:Patched:1.2.1') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    shadow ('com.github.EnderTurret:Patched:1.2.1') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
}

loom {
    accessWidenerPath = file('src/main/resources/patched.accesswidener')

    mixin {
        defaultRefmapName = 'patched.refmap.json'
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

import net.fabricmc.loom.task.RemapJarTask

task remappedShadowJar(type: RemapJarTask, dependsOn: shadowJar) {
    input = tasks.shadowJar.archiveFile
    archiveClassifier = ''
}

artifacts {
    archives remappedShadowJar
    shadow shadowJar
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

jar {
    manifest {
        attributes([
            'Specification-Title': 'Patched',
            'Specification-Vendor': 'EnderTurret',
            'Specification-Version': '1',
            'Implementation-Title': 'Patched',
            'Implementation-Version': "${version}",
            'Implementation-Vendor' : 'EnderTurret',
			'MixinConfigs': 'mixins.patched.json'
        ])
    }
}

// Compact JSON files for smol jars.

import groovy.json.*

processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}