plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'net.neoforged.gradle.userdev' version '7.0.161'
}

base {
    archivesName = 'Patched-neoforge'
}

configurations {
    minecraftLibrary {}
    implementation.extendsFrom minecraftLibrary
}

dependencies {
    implementation 'net.neoforged:neoforge:21.1.23'

    compileOnly (project(':PatchedModCommon')) {
        exclude group: 'org.spongepowered', module: 'mixin'
        exclude group: 'net.minecraft', module: 'joined_aw'
    }

    minecraftLibrary ("com.github.EnderTurret:Patched:$patchedVersion") {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
}

subsystems {
    parchment {
        minecraftVersion = '1.21'
        mappingsVersion = '2024.07.28'
    }
}

minecraft {
    accessTransformers.file rootProject.file('forge/src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    configureEach {
        workingDirectory project.file('run/1.21')

        modSources {
            //add sourceSets.main
            local project(':PatchedModCommon').sourceSets.main
        }

        dependencies {
            runtime project.configurations.minecraftLibrary
        }
    }

    client {}

    server {}

    data {
        programArguments.addAll '--mod', 'patched', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

compileJava {
    source project(':PatchedModCommon').sourceSets.main.allSource
}

sourcesJar {
    from project(':PatchedModCommon').sourceSets.main.allJava
}

processResources {
    from project(':PatchedModCommon').sourceSets.main.resources
}

shadowJar {
    archiveClassifier = ''

    dependencies {
        include(dependency("com.github.EnderTurret:Patched:$patchedVersion"))
    }
}

jar.enabled = false

artifacts {
    archives shadowJar
}